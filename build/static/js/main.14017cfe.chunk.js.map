{"version":3,"sources":["services/puhelinluettelo.js","components/Numbers.js","components/AddName.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","PersonInfo","person","handleDeletePerson","name","number","onClick","Phonebook","persons","map","key","Notification","message","dbNotificationStyle","color","fontSize","borderStyle","borderRadius","marginBottom","padding","style","className","text","AddName","addPerson","dbMessage","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","SearchBar","props","searchName","handleSearchChange","App","useState","setPersons","setNewName","setNewNumber","searchTerm","setSearchTerm","filteredPersons","setFilteredPersons","setDbMessage","useEffect","dbService","initialPersons","newFiltered","filter","toLowerCase","includes","databaseMessage","setTimeout","e","preventDefault","newPerson","some","window","confirm","personRef","find","p","updatedPerson","catch","error","console","log","updateContactNumber","returnedPerson","concat","addContactToDB","target","Numbers","deletePersonFromDB","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14017cfe.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'https://vast-forest-15425.herokuapp.com/api/persons'\r\n\r\nconst getAll = () =>{\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst createPerson = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteObject = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, createPerson, deleteObject, update}","import React from 'react'\r\n\r\nconst PersonInfo = ({ person, handleDeletePerson }) => {\r\n  return (\r\n    <li>\r\n      {person.name} {person.number}\r\n      <button onClick={() => handleDeletePerson(person.id)}>delete</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nconst Phonebook = ({ persons, handleDeletePerson }) => {\r\n  return (\r\n    <ul>\r\n      {persons.map((person) => (\r\n        <PersonInfo\r\n          person={person}\r\n          key={person.id}\r\n          handleDeletePerson={handleDeletePerson}\r\n        />\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Phonebook\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  const dbNotificationStyle = {\r\n    color: message.color,\r\n    fontSize: 18,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    marginBottom: 10,\r\n    padding: 5\r\n  }\r\n  return (\r\n    <div style={dbNotificationStyle} className=\"databaseMessage\">{message.text}</div>\r\n  )\r\n}\r\n\r\nconst AddName = ({\r\n  addPerson,\r\n  dbMessage,\r\n  newName,\r\n  newNumber,\r\n  handleNameChange,\r\n  handleNumberChange,\r\n}) => {\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n      <div>\r\n        <Notification message={dbMessage} />\r\n        <label>\r\n          name:\r\n          <input value={newName} onChange={handleNameChange} />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          number:\r\n          <input value={newNumber} onChange={handleNumberChange} />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddName\r\n","import React from 'react'\r\n\r\nconst SearchBar = (props) => {\r\n    return (\r\n        <label>\r\n            search\r\n            <input type=\"text\" value={props.searchName} onChange={props.handleSearchChange} />\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React, { useState, useEffect } from 'react'\r\n\r\nimport dbService from './services/puhelinluettelo'\r\nimport Numbers from './components/Numbers'\r\nimport AddName from './components/AddName'\r\nimport SearchBar from './components/SearchBar'\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [filteredPersons, setFilteredPersons] = useState([])\r\n  const [dbMessage, setDbMessage] = useState(null)\r\n\r\n  //#region Database functions\r\n\r\n  //Fetch initial database\r\n  useEffect(() => {\r\n    dbService.getAll().then((initialPersons) => {\r\n      setPersons(initialPersons)\r\n    })\r\n  }, [])\r\n\r\n  const addContactToDB = (newPerson) => {\r\n    dbService\r\n      .createPerson(newPerson)\r\n      .then((returnedPerson) => {\r\n        setPersons(persons.concat(returnedPerson))\r\n        setNewName('')\r\n        setNewNumber('')\r\n        databaseMessage({\r\n          text: `Added ${newPerson.name}`,\r\n          color: 'green',\r\n        })\r\n      })\r\n  }\r\n\r\n  const updateContactNumber = (person) => {\r\n    const personRef = persons.find(\r\n      p => p.name === person.name\r\n    )\r\n    const newPerson = {\r\n      ...personRef,\r\n      number: newNumber,\r\n    }\r\n    dbService\r\n      .update(newPerson.id, newPerson)\r\n      .then((updatedPerson) => {\r\n        setPersons(\r\n          persons.map((person) =>\r\n            person.id !== newPerson.id\r\n              ? person\r\n              : updatedPerson\r\n          )\r\n        )\r\n        databaseMessage({\r\n          text: `Updated number of ${newPerson.name}`,\r\n          color: 'green',\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        console.error(error)\r\n        databaseMessage({\r\n          text: `The information of ${newPerson.name} has been removed from the server`,\r\n          color: 'red',\r\n        })\r\n        console.log(person);\r\n        setPersons(persons.filter(p => p.id !== newPerson.id))\r\n      })\r\n    \r\n  }\r\n\r\n  const deletePersonFromDB = (id) => {\r\n    const name = persons.find((person) => person.id === id)\r\n      .name\r\n    if (window.confirm(`Do you want to delete ${name}?`)) {\r\n      dbService\r\n        .deleteObject(id)\r\n        .then(\r\n          setPersons(\r\n            persons.filter((person) => person.id !== id)\r\n          ),\r\n          databaseMessage({\r\n            text: `Deleted ${name}`,\r\n            color: 'green',\r\n          })\r\n        )\r\n        .catch((error) => {\r\n          console.error(error)\r\n          databaseMessage({\r\n            text: `The information of ${name} has been removed from the server`,\r\n            color: 'red',\r\n          })\r\n          setPersons(persons.filter(p => p.id !== id))\r\n        })\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Event Handlers\r\n\r\n  // Adding new contact\r\n  const handleAddPerson = (e) => {\r\n    e.preventDefault()\r\n    const newPerson = {\r\n      name: newName,\r\n      number: newNumber,\r\n    }\r\n    //Check if new person is NOT already in the contacts, and if not add to DB\r\n    if (\r\n      !persons.some(\r\n        (person) => person.name === newPerson.name\r\n      )\r\n    ) {\r\n      addContactToDB(newPerson)\r\n    } else {\r\n      // IF the new person IS in the contacts ask if it is to updated otherwise cancel\r\n      if (\r\n        window.confirm(\r\n          `${newName} is already in the phonebook, do you want to replace the old number with a new one?`\r\n        )\r\n      ) {\r\n        updateContactNumber(newPerson)\r\n      } else {\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDeletePerson = (id) => {\r\n    deletePersonFromDB(id)\r\n  }\r\n\r\n  const handleNameChange = (e) => {\r\n    setNewName(e.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (e) => {\r\n    setNewNumber(e.target.value)\r\n  }\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchTerm(e.target.value.toLowerCase())\r\n  }\r\n  //#endregion\r\n\r\n  // Search\r\n  useEffect(() => {\r\n    if (searchTerm === '') {\r\n      setFilteredPersons(persons)\r\n      return\r\n    }\r\n    const newFiltered = persons.filter((person) =>\r\n      person.name.toLowerCase().includes(searchTerm)\r\n    )\r\n    setFilteredPersons(newFiltered)\r\n  }, [searchTerm, persons])\r\n\r\n  const databaseMessage = (message) => {\r\n    setDbMessage(message)\r\n    setTimeout(() => setDbMessage(null), 3000)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <h2>Add a new contact</h2>\r\n      <AddName\r\n        addPerson={handleAddPerson}\r\n        dbMessage={dbMessage}\r\n        newName={newName}\r\n        newNumber={newNumber}\r\n        handleNameChange={handleNameChange}\r\n        handleNumberChange={handleNumberChange}\r\n      />\r\n      <h2>Contacts</h2>\r\n      <SearchBar\r\n        searchName={searchTerm}\r\n        handleSearchChange={handleSearchChange}\r\n      />\r\n      <Numbers\r\n        persons={filteredPersons}\r\n        handleDeletePerson={handleDeletePerson}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}